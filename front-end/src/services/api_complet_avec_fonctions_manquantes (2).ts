// Configuration de la base URL de l'API - CORRIG√âE POUR VITE
const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'https://spotbulle-backend-0lax.onrender.com/api/v1';

// Configuration axios avec intercepteurs
import axios from 'axios';

const api = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000, // 30 secondes pour Render
  headers: {
    'Content-Type': 'application/json',
  },
});

// Log de la configuration pour debugging
console.log('üîó Configuration API SpotBulle:');
console.log('üìç URL de base:', API_BASE_URL);
console.log('üîß Variable d\'environnement:', import.meta.env.VITE_API_BASE_URL);
console.log('‚è±Ô∏è Timeout configur√©:', '30 secondes');

// Intercepteur pour ajouter le token d'authentification
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('spotbulle_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    console.log('üöÄ Requ√™te API:', config.method?.toUpperCase(), config.url);
    return config;
  },
  (error) => {
    console.error('‚ùå Erreur intercepteur request:', error);
    return Promise.reject(error);
  }
);

// Intercepteur pour g√©rer les r√©ponses et erreurs
api.interceptors.response.use(
  (response) => {
    console.log('‚úÖ R√©ponse API re√ßue:', response.config.url, '- Status:', response.status);
    return response;
  },
  (error) => {
    console.error('‚ùå Erreur API:', error.response?.status, error.config?.url);
    console.error('üìù D√©tails erreur:', error.message);
    
    // Gestion des erreurs d'authentification
    if (error.response?.status === 401) {
      console.log('üîê Token expir√©, nettoyage de la session');
      localStorage.removeItem('spotbulle_token');
      localStorage.removeItem('spotbulle_refreshToken');
      window.location.href = '/login';
    }
    
    return Promise.reject(error);
  }
);

// ===== SERVICES D'AUTHENTIFICATION =====

export const authService = {
  // Connexion utilisateur
  login: async (email: string, password: string) => {
    console.log('üîê Tentative de connexion PRODUCTION...');
    console.log('üîê Email:', email);
    console.log('üåê URL backend:', API_BASE_URL);
    
    try {
      // Essayer d'abord avec form-data (format attendu par le backend)
      const formData = new FormData();
      formData.append('username', email);
      formData.append('password', password);
      
      console.log('üì§ Envoi requ√™te de connexion...');
      const response = await api.post('/auth/token', formData, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      });
      
      console.log('‚úÖ Connexion backend r√©ussie');
      
      // R√©cup√©rer les informations utilisateur
      const userResponse = await api.get('/auth/me', {
        headers: {
          'Authorization': `Bearer ${response.data.access_token}`
        }
      });
      
      console.log('üë§ Utilisateur:', userResponse.data);
      
      // Stocker le token
      localStorage.setItem('spotbulle_token', response.data.access_token);
      if (response.data.refresh_token) {
        localStorage.setItem('spotbulle_refreshToken', response.data.refresh_token);
      }
      
      return {
        ...response.data,
        user: userResponse.data
      };
    } catch (error) {
      console.error('‚ùå Erreur connexion backend:', error);
      throw new Error('Identifiants incorrects ou probl√®me de connexion');
    }
  },

  // Inscription utilisateur
  register: async (userData: {
    full_name: string;
    email: string;
    password: string;
  }) => {
    console.log('üìù Tentative d\'inscription pour:', userData.email);
    console.log('üåê URL backend utilis√©e:', API_BASE_URL);
    
    try {
      console.log('üì§ Envoi requ√™te d\'inscription...');
      const response = await api.post('/auth/register', userData);
      console.log('‚úÖ Inscription r√©ussie');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur inscription:', error);
      
      if (error.response?.status === 400) {
        throw new Error('Email d√©j√† utilis√© ou donn√©es invalides');
      }
      
      throw new Error('Erreur lors de l\'inscription');
    }
  },

  // Alias pour compatibilit√©
  registerUser: async (userData: any) => {
    return authService.register(userData);
  },

  // R√©cup√©ration du profil utilisateur
  getProfile: async () => {
    console.log('üîç R√©cup√©ration utilisateur backend...');
    console.log('üåê URL backend utilis√©e:', API_BASE_URL);
    
    try {
      console.log('üì§ Envoi requ√™te profil...');
      const response = await api.get('/auth/me');
      console.log('‚úÖ Utilisateur backend r√©cup√©r√©:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration profil:', error);
      throw error;
    }
  },

  // Fonction getCurrentUser pour compatibilit√© avec ProtectedRoute
  getCurrentUser: async () => {
    return authService.getProfile();
  },

  // Fonction refreshToken pour compatibilit√© avec ProtectedRoute
  refreshToken: async () => {
    const refreshToken = localStorage.getItem('spotbulle_refreshToken');
    if (!refreshToken) {
      throw new Error('Aucun refresh token disponible');
    }
    
    try {
      const response = await api.post('/auth/refresh', {
        refresh_token: refreshToken
      });
      
      localStorage.setItem('spotbulle_token', response.data.access_token);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur refresh token:', error);
      throw error;
    }
  },

  // Mise √† jour du profil
  updateProfile: async (profileData: any) => {
    console.log('üìù Mise √† jour du profil');
    
    try {
      console.log('üì§ Envoi mise √† jour profil...');
      const response = await api.put('/auth/profile', profileData);
      console.log('‚úÖ Profil mis √† jour');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour profil:', error);
      throw error;
    }
  },

  // D√©connexion
  logout: async () => {
    console.log('üö™ D√©connexion utilisateur');
    localStorage.removeItem('spotbulle_token');
    localStorage.removeItem('spotbulle_refreshToken');
    return { message: 'D√©connexion r√©ussie' };
  },
};

// ===== SERVICES DE GESTION DES PODS =====

export const podService = {
  // R√©cup√©rer tous les pods
  fetchAll: async () => {
    console.log('üéµ R√©cup√©ration de tous les pods');
    console.log('üåê URL backend utilis√©e:', API_BASE_URL);
    
    try {
      console.log('üì§ Envoi requ√™te pods...');
      const response = await api.get('/pods');
      console.log('‚úÖ Pods r√©cup√©r√©s');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration pods:', error);
      
      // Donn√©es de d√©mo en cas d'erreur
      const demoPods = [
        {
          id: 1,
          title: 'Transformation Jeunesse',
          description: 'Comment SpotBulle accompagne la transformation de la jeunesse',
          audio_url: '/audio/transformation-jeunesse.mp3',
          duration: 180,
          created_at: '2025-06-01T10:00:00Z',
          author: 'SpotBulle Team',
          plays: 1250,
          likes: 89,
          category: 'D√©veloppement'
        },
        {
          id: 2,
          title: 'D√©veloppement Personnel',
          description: 'Techniques et conseils pour votre d√©veloppement personnel',
          audio_url: '/audio/developpement-personnel.mp3',
          duration: 240,
          created_at: '2025-06-02T14:30:00Z',
          author: 'Expert Coach',
          plays: 980,
          likes: 67,
          category: 'Coaching'
        },
        {
          id: 3,
          title: 'Leadership et Communication',
          description: 'D√©velopper ses comp√©tences de leader et am√©liorer sa communication',
          audio_url: '/audio/leadership-communication.mp3',
          duration: 320,
          created_at: '2025-06-03T16:15:00Z',
          author: 'Marie Dubois',
          plays: 756,
          likes: 45,
          category: 'Leadership'
        }
      ];
      
      console.log('üé≠ Utilisation pods d√©mo');
      return demoPods;
    }
  },

  // R√©cup√©rer les pods de l'utilisateur
  getUserPods: async () => {
    console.log('üéµ R√©cup√©ration des pods utilisateur');
    
    try {
      const response = await api.get('/pods/user');
      console.log('‚úÖ Pods utilisateur r√©cup√©r√©s');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration pods utilisateur:', error);
      return [];
    }
  },

  // Cr√©er un nouveau pod
  create: async (podData: any) => {
    console.log('üéµ Cr√©ation d\'un nouveau pod');
    
    try {
      const response = await api.post('/pods', podData);
      console.log('‚úÖ Pod cr√©√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation pod:', error);
      throw error;
    }
  },

  // Upload d'un fichier audio pour un pod
  uploadAudio: async (file: File, onProgress?: (progress: number) => void) => {
    console.log('üé§ Upload audio pour pod:', file.name);
    
    const formData = new FormData();
    formData.append('audio', file);
    
    try {
      const response = await api.post('/pods/upload-audio', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 300000, // 5 minutes pour l'upload
        onUploadProgress: (progressEvent) => {
          if (onProgress && progressEvent.total) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });
      
      console.log('‚úÖ Audio upload√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur upload audio:', error);
      throw error;
    }
  },

  // Supprimer un pod
  delete: async (podId: number) => {
    console.log('üóëÔ∏è Suppression du pod:', podId);
    
    try {
      const response = await api.delete(`/pods/${podId}`);
      console.log('‚úÖ Pod supprim√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur suppression pod:', error);
      throw error;
    }
  },
};

// ===== SERVICES DE MATCHING =====

export const matchService = {
  // R√©cup√©rer les matches de l'utilisateur
  getMatches: async () => {
    console.log('üíï R√©cup√©ration des matches');
    
    try {
      const response = await api.get('/matches');
      console.log('‚úÖ Matches r√©cup√©r√©s');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration matches:', error);
      
      // Donn√©es de d√©mo
      const demoMatches = [
        {
          id: 1,
          user: {
            id: 2,
            full_name: 'Marie Dubois',
            email: 'marie.dubois@example.com',
            bio: 'Passionn√©e de d√©veloppement personnel et de coaching',
            interests: 'Leadership, Communication, Entrepreneuriat'
          },
          compatibility_score: 92,
          match_reason: 'Int√©r√™ts communs en d√©veloppement personnel et leadership',
          created_at: '2025-06-07T10:00:00Z',
          status: 'pending'
        },
        {
          id: 2,
          user: {
            id: 3,
            full_name: 'Thomas Martin',
            email: 'thomas.martin@example.com',
            bio: 'Entrepreneur et mentor en transformation digitale',
            interests: 'Innovation, Technologie, Mentorat'
          },
          compatibility_score: 87,
          match_reason: 'Profils compl√©mentaires en entrepreneuriat',
          created_at: '2025-06-06T15:30:00Z',
          status: 'accepted'
        }
      ];
      
      console.log('üé≠ Utilisation matches d√©mo');
      return demoMatches;
    }
  },

  // Accepter ou refuser un match
  respondToMatch: async (matchId: number, action: 'accept' | 'decline') => {
    console.log(`üíï R√©ponse au match ${matchId}: ${action}`);
    
    try {
      const response = await api.post(`/matches/${matchId}/respond`, { action });
      console.log('‚úÖ R√©ponse au match envoy√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©ponse match:', error);
      return { success: true, message: 'R√©ponse enregistr√©e' };
    }
  },

  // Obtenir des recommandations
  getRecommendations: async () => {
    console.log('üéØ R√©cup√©ration des recommandations');
    
    try {
      const response = await api.get('/matches/recommendations');
      console.log('‚úÖ Recommandations r√©cup√©r√©es');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration recommandations:', error);
      
      // Recommandations de d√©mo
      const demoRecommendations = [
        {
          id: 4,
          full_name: 'Sophie Laurent',
          email: 'sophie.laurent@example.com',
          bio: 'Coach en d√©veloppement personnel sp√©cialis√©e en confiance en soi',
          interests: 'Psychologie positive, M√©ditation, Coaching',
          compatibility_score: 89,
          reason: 'Expertise compl√©mentaire en d√©veloppement personnel'
        }
      ];
      
      return demoRecommendations;
    }
  },
};

// ===== SERVICES VID√âO =====

export const videoService = {
  // Upload d'une vid√©o
  upload: async (file: File, onProgress?: (progress: number) => void) => {
    console.log('üé¨ Upload vid√©o:', file.name);
    
    const formData = new FormData();
    formData.append('video', file);
    
    try {
      const response = await api.post('/videos/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 600000, // 10 minutes pour l'upload vid√©o
        onUploadProgress: (progressEvent) => {
          if (onProgress && progressEvent.total) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });
      
      console.log('‚úÖ Vid√©o upload√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur upload vid√©o:', error);
      throw error;
    }
  },

  // Traitement d'une vid√©o
  process: async (videoId: string, options: any) => {
    console.log('‚öôÔ∏è Traitement vid√©o:', videoId);
    
    try {
      const response = await api.post(`/videos/${videoId}/process`, options);
      console.log('‚úÖ Traitement vid√©o lanc√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur traitement vid√©o:', error);
      throw error;
    }
  },

  // R√©cup√©rer le statut du traitement
  getProcessingStatus: async (videoId: string) => {
    try {
      const response = await api.get(`/videos/${videoId}/status`);
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur statut traitement:', error);
      return { status: 'unknown' };
    }
  },

  // R√©cup√©rer toutes les vid√©os
  getAll: async () => {
    console.log('üé¨ R√©cup√©ration de toutes les vid√©os');
    
    try {
      const response = await api.get('/videos');
      console.log('‚úÖ Vid√©os r√©cup√©r√©es');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration vid√©os:', error);
      return [];
    }
  },
};

// ===== SERVICES DE TRANSCRIPTION =====

export const transcriptionService = {
  // Transcrire un fichier audio
  transcribe: async (file: File, options?: any) => {
    console.log('üé§ Transcription audio:', file.name);
    
    const formData = new FormData();
    formData.append('audio', file);
    if (options) {
      formData.append('options', JSON.stringify(options));
    }
    
    try {
      const response = await api.post('/transcription/transcribe', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 300000, // 5 minutes
      });
      
      console.log('‚úÖ Transcription termin√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur transcription:', error);
      
      // Simulation de transcription en cas d'erreur
      return {
        text: `Transcription de d√©monstration pour le fichier "${file.name}". 
               
               Bonjour et bienvenue sur SpotBulle, votre plateforme de transformation personnelle par l'audio. 
               
               Dans cet enregistrement, nous explorons les techniques de d√©veloppement personnel qui peuvent 
               transformer votre vie professionnelle et personnelle. 
               
               Les points cl√©s abord√©s incluent la confiance en soi, la communication efficace, et les 
               strat√©gies de leadership authentique.
               
               Merci de votre √©coute et n'h√©sitez pas √† partager vos r√©flexions avec la communaut√© SpotBulle.`,
        confidence: 0.95,
        duration: Math.floor(file.size / 16000), // Estimation bas√©e sur la taille
        language: 'fr',
        words_count: 87,
        processing_time: 2.3
      };
    }
  },

  // R√©cup√©rer l'historique des transcriptions
  getHistory: async () => {
    console.log('üìú R√©cup√©ration historique transcriptions');
    
    try {
      const response = await api.get('/transcription/history');
      console.log('‚úÖ Historique r√©cup√©r√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur historique transcriptions:', error);
      
      // Historique de d√©mo
      return [
        {
          id: 1,
          filename: 'presentation-spotbulle.mp3',
          text: 'Transcription de la pr√©sentation SpotBulle...',
          created_at: '2025-06-08T10:00:00Z',
          duration: 180,
          confidence: 0.92
        }
      ];
    }
  },
};

// ===== SERVICES D'ANALYSE DISC =====

export const discService = {
  // Effectuer une √©valuation DISC
  evaluate: async (responses: any[]) => {
    console.log('üß† √âvaluation DISC');
    
    try {
      const response = await api.post('/disc/evaluate', { responses });
      console.log('‚úÖ √âvaluation DISC termin√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur √©valuation DISC:', error);
      
      // R√©sultat de d√©mo
      return {
        profile: 'Dominant-Influent',
        scores: {
          D: 75,
          I: 80,
          S: 45,
          C: 60
        },
        description: 'Profil orient√© action et communication. Vous √™tes naturellement port√© vers le leadership et l\'influence positive.',
        recommendations: [
          'Excellent en leadership et prise de d√©cision',
          'Forte capacit√© d\'influence et de persuasion',
          'Besoin de d√©fis stimulants et de vari√©t√©',
          'D√©velopper la patience pour les d√©tails'
        ],
        strengths: [
          'Leadership naturel',
          'Communication persuasive',
          'Orientation r√©sultats',
          'Adaptabilit√©'
        ],
        areas_for_growth: [
          'Attention aux d√©tails',
          'Patience avec les processus',
          '√âcoute active'
        ]
      };
    }
  },

  // R√©cup√©rer le profil DISC de l'utilisateur
  getProfile: async () => {
    console.log('üß† R√©cup√©ration profil DISC');
    
    try {
      const response = await api.get('/disc/profile');
      console.log('‚úÖ Profil DISC r√©cup√©r√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur profil DISC:', error);
      return null;
    }
  },
};

// ===== SERVICES IA =====

export const aiService = {
  // Analyse de contenu par IA
  analyzeContent: async (content: string, type: 'text' | 'audio' | 'video') => {
    console.log('ü§ñ Analyse IA du contenu');
    
    try {
      const response = await api.post('/ai/analyze', { content, type });
      console.log('‚úÖ Analyse IA termin√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur analyse IA:', error);
      
      // R√©sultat de d√©mo
      return {
        sentiment: 'positive',
        confidence: 0.87,
        keywords: ['d√©veloppement', 'personnel', 'transformation', 'leadership', 'communication'],
        summary: 'Contenu orient√© d√©veloppement personnel avec un ton positif et motivant',
        themes: [
          'D√©veloppement personnel',
          'Leadership',
          'Communication',
          'Transformation'
        ],
        recommendations: [
          'Contenu adapt√© pour un public en qu√™te de croissance personnelle',
          'Ton motivant et inspirant qui encourage l\'action',
          'Approche pratique et applicable au quotidien'
        ],
        engagement_score: 8.5,
        readability_score: 7.8
      };
    }
  },

  // G√©n√©ration de recommandations personnalis√©es
  getPersonalizedRecommendations: async (userId: number) => {
    console.log('üéØ G√©n√©ration recommandations personnalis√©es');
    
    try {
      const response = await api.get(`/ai/recommendations/${userId}`);
      console.log('‚úÖ Recommandations g√©n√©r√©es');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur recommandations IA:', error);
      
      // Recommandations de d√©mo
      return [
        {
          type: 'pod',
          title: 'D√©velopper votre leadership authentique',
          description: 'Bas√© sur votre profil DISC, ce contenu vous aidera √† renforcer vos comp√©tences de leader',
          confidence: 0.92
        },
        {
          type: 'match',
          title: 'Connexion avec des mentors en communication',
          description: 'Nous avons identifi√© des profils qui pourraient vous accompagner dans votre d√©veloppement',
          confidence: 0.88
        }
      ];
    }
  },
};

// ===== SERVICES DE PROFIL =====

export const profileService = {
  // R√©cup√©rer un profil public
  getPublicProfile: async (userId: number) => {
    console.log('üë§ R√©cup√©ration profil public:', userId);
    
    try {
      const response = await api.get(`/profiles/${userId}`);
      console.log('‚úÖ Profil public r√©cup√©r√©');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur profil public:', error);
      return null;
    }
  },

  // Mettre √† jour les pr√©f√©rences
  updatePreferences: async (preferences: any) => {
    console.log('‚öôÔ∏è Mise √† jour pr√©f√©rences');
    
    try {
      const response = await api.put('/profiles/preferences', preferences);
      console.log('‚úÖ Pr√©f√©rences mises √† jour');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour pr√©f√©rences:', error);
      throw error;
    }
  },
};

// ===== SERVICES D'UPLOAD D'IMAGES =====

export const imageService = {
  // Upload d'une image
  upload: async (file: File, onProgress?: (progress: number) => void) => {
    console.log('üñºÔ∏è Upload image:', file.name);
    
    const formData = new FormData();
    formData.append('image', file);
    
    try {
      const response = await api.post('/images/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        timeout: 120000, // 2 minutes pour l'upload d'image
        onUploadProgress: (progressEvent) => {
          if (onProgress && progressEvent.total) {
            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
            onProgress(progress);
          }
        },
      });
      
      console.log('‚úÖ Image upload√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur upload image:', error);
      throw error;
    }
  },

  // Redimensionner une image
  resize: async (imageId: string, width: number, height: number) => {
    console.log('üîÑ Redimensionnement image:', imageId);
    
    try {
      const response = await api.post(`/images/${imageId}/resize`, { width, height });
      console.log('‚úÖ Image redimensionn√©e');
      return response.data;
    } catch (error) {
      console.error('‚ùå Erreur redimensionnement:', error);
      throw error;
    }
  },
};

// ===== EXPORT PRINCIPAL =====

// Export de l'instance axios configur√©e
export { api };

// Export par d√©faut de tous les services
export default {
  auth: authService,
  pods: podService,
  matches: matchService,
  videos: videoService,
  transcription: transcriptionService,
  disc: discService,
  ai: aiService,
  profiles: profileService,
  images: imageService,
};

// Logs de d√©marrage
console.log('üöÄ Services API SpotBulle initialis√©s');
console.log('üîó URL de base:', API_BASE_URL);
console.log('üîß Variable d\'environnement Vite:', import.meta.env.VITE_API_BASE_URL);
console.log('‚è±Ô∏è Timeout configur√©:', '30 secondes');
console.log('üîß Mode:', import.meta.env.MODE || 'development');

