// Configuration de la base URL - OPTIMIS√âE POUR PRODUCTION
const API_BASE_URL = "https://spotbulle-backend-0lax.onrender.com/api/v1";

import axios from "axios";
import type { DISCScores, DISCResults } from "../schemas/disc_schema";

// Constante pour la taille maximale des fichiers (500 Mo)
const MAX_FILE_SIZE = 200 * 1024 * 1024;

const apiClient = axios.create({
  baseURL: API_BASE_URL,
  headers: { 
    "Content-Type": "application/json",
    "Accept": "application/json"
  },
  withCredentials: false,
  timeout: 120000, // 2 minutes pour Render
  maxContentLength: MAX_FILE_SIZE,
  maxBodyLength: MAX_FILE_SIZE,
});

// Fonction pour stocker les tokens
const storeTokens = (accessToken: string, refreshToken?: string) => {
  try {
    localStorage.setItem("spotbulle_token", accessToken);
    if (refreshToken) {
      localStorage.setItem("spotbulle_refresh_token", refreshToken);
    }
    console.log("‚úÖ Tokens stock√©s avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur stockage tokens:", error);
  }
};

// Fonction pour r√©cup√©rer le token
const getToken = () => {
  try {
    return localStorage.getItem("spotbulle_token");
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration token:", error);
    return null;
  }
};

// Fonction pour nettoyer les tokens
const clearTokens = () => {
  try {
    localStorage.removeItem("spotbulle_token");
    localStorage.removeItem("spotbulle_refresh_token");
    console.log("üßπ Tokens nettoy√©s");
  } catch (error) {
    console.error("‚ùå Erreur nettoyage tokens:", error);
  }
};

// Intercepteur pour ajouter le token JWT
apiClient.interceptors.request.use((config) => {
  const token = getToken();
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

// Intercepteur pour g√©rer les erreurs avec retry automatique
apiClient.interceptors.response.use(
  (response) => response,
  async (error) => {
    console.error("üö® Erreur API d√©taill√©e:", {
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
      url: error.config?.url,
      method: error.config?.method,
      message: error.message
    });
    
    if (!error.response) {
      return Promise.reject(new Error("Serveur inaccessible. V√©rifiez votre connexion internet."));
    }
    
    const originalRequest = error.config;
    
    // Retry automatique pour les erreurs 5xx (serveur)
    if (error.response?.status >= 500 && !originalRequest._retry) {
      originalRequest._retry = true;
      console.log("üîÑ Retry automatique pour erreur serveur...");
      
      // Attendre 3 secondes avant de r√©essayer
      await new Promise(resolve => setTimeout(resolve, 3000));
      return apiClient(originalRequest);
    }
    
    // Gestion des erreurs d'authentification
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      
      try {
        const newToken = await authService.refreshToken();
        originalRequest.headers.Authorization = `Bearer ${newToken}`;
        return apiClient(originalRequest);
      } catch (refreshError) {
        console.error("‚ùå √âchec refresh token:", refreshError);
        authService.logout();
        return Promise.reject(new Error("Session expir√©e, veuillez vous reconnecter"));
      }
    }
    
    return Promise.reject(error);
  }
);

// ==================== INTERFACES ====================

export interface IUser {
  id: number;
  email: string;
  full_name: string;
  is_active?: boolean;
  created_at: string;
  updated_at: string;
}

export interface IPod {
  id: number;
  title: string;
  description: string | null;
  audio_file_url: string | null;
  transcription: string | null;
  owner_id: number;
  created_at: string;
  updated_at: string;
  tags?: string[];
  duration?: number;
  file_size?: number;
}

export interface IProfile {
  user_id: number;
  bio: string | null;
  profile_picture_url: string | null;
  disc_type: string | null;
  disc_assessment_results: DISCResults | null;
  interests: string[];
  skills: string[];
  objectives: string | null;
  created_at: string;
  updated_at: string;
}

export interface IAMatch {
  user: IUser;
  profile: IProfile | null;
  match_score: number;
  score_details: {
    disc_score: number;
    interests_score: number;
    content_score: number;
    objectives_score: number;
  };
  match_reason: string;
}

export interface IVideo {
  id: number;
  title: string;
  description: string | null;
  video_file_url: string;
  thumbnail_url: string | null;
  duration: number | null;
  owner_id: number;
  created_at: string;
  updated_at: string;
  file_size?: number;
  format?: string;
}

export interface ITranscription {
  id: number;
  content: string;
  confidence: number;
  language: string;
  duration: number;
  created_at: string;
  updated_at: string;
  segments?: Array<{
    start: number;
    end: number;
    text: string;
    confidence: number;
  }>;
}

export interface IAnalysis {
  id: number;
  content_type: 'audio' | 'video' | 'text';
  analysis_type: 'sentiment' | 'topics' | 'summary' | 'keywords';
  results: any;
  confidence: number;
  created_at: string;
  updated_at: string;
}

// ==================== SERVICE D'AUTHENTIFICATION ====================

export const authService = {
  loginUser: async (userData: { email: string; password: string }): Promise<string> => {
    try {
      console.log("üîê Tentative de connexion avec:", userData.email);
      
      // M√©thode 1: Format JSON (recommand√©)
      try {
        const response = await apiClient.post("/auth/login", {
          email: userData.email,
          password: userData.password
        });
        
        if (response.data?.access_token) {
          console.log("‚úÖ Connexion r√©ussie (JSON)");
          storeTokens(response.data.access_token, response.data.refresh_token);
          return response.data.access_token;
        }
      } catch (jsonError) {
        console.log("‚ö†Ô∏è √âchec format JSON, test form-data...");
      }
      
      // M√©thode 2: Format form-data (fallback)
      const formData = new FormData();
      formData.append("username", userData.email);
      formData.append("password", userData.password);
      
      const response = await apiClient.post("/auth/token", formData, {
        headers: { 
          "Content-Type": "multipart/form-data"
        },
      });
      
      if (response.data?.access_token) {
        console.log("‚úÖ Connexion r√©ussie (form-data)");
        storeTokens(response.data.access_token, response.data.refresh_token);
        return response.data.access_token;
      } else {
        throw new Error("Token non re√ßu du serveur");
      }
    } catch (error: any) {
      console.error("‚ùå Erreur connexion:", error.response?.data || error.message);
      
      if (error.response?.status === 401) {
        throw new Error("Identifiants incorrects ou probl√®me de connexion");
      } else if (error.response?.status === 422) {
        throw new Error("Format des donn√©es incorrect");
      } else if (error.response?.status >= 500) {
        throw new Error("Serveur temporairement indisponible, r√©essayez dans quelques instants");
      } else {
        throw new Error("Probl√®me de connexion au serveur");
      }
    }
  },

  register: async (userData: { 
    email: string; 
    password: string; 
    full_name: string 
  }): Promise<IUser> => {
    try {
      console.log("üìù Tentative d'inscription avec:", userData.email);
      
      const response = await apiClient.post("/auth/register", {
        email: userData.email,
        password: userData.password,
        full_name: userData.full_name
      });
      
      console.log("‚úÖ Inscription r√©ussie:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur inscription:", error.response?.data || error.message);
      
      if (error.response?.status === 400) {
        throw new Error("Email d√©j√† utilis√© ou donn√©es invalides");
      } else if (error.response?.status === 422) {
        throw new Error("Format des donn√©es incorrect");
      } else if (error.response?.status >= 500) {
        throw new Error("Serveur temporairement indisponible, r√©essayez dans quelques instants");
      } else {
        throw new Error("L'inscription a √©chou√©. Veuillez r√©essayer.");
      }
    }
  },

  getCurrentUser: async (): Promise<IUser> => {
    try {
      console.log("üë§ R√©cup√©ration des informations utilisateur...");
      const response = await apiClient.get("/auth/me");
      console.log("‚úÖ Utilisateur r√©cup√©r√©:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration utilisateur:", error.response?.data || error.message);
      
      if (error.response?.status === 401) {
        throw new Error("Session expir√©e");
      } else {
        throw new Error("Impossible de r√©cup√©rer les informations utilisateur");
      }
    }
  },

  refreshToken: async (): Promise<string> => {
    try {
      const refreshToken = localStorage.getItem("spotbulle_refresh_token");
      if (!refreshToken) {
        throw new Error("Pas de refresh token");
      }
      
      const response = await apiClient.post("/auth/refresh", {
        refresh_token: refreshToken
      });
      
      if (response.data?.access_token) {
        storeTokens(response.data.access_token, response.data.refresh_token);
        return response.data.access_token;
      } else {
        throw new Error("Nouveau token non re√ßu");
      }
    } catch (error) {
      console.error("‚ùå Erreur refresh token:", error);
      throw error;
    }
  },

  logout: () => {
    console.log("üö™ D√©connexion...");
    clearTokens();
  },

  isAuthenticated: (): boolean => {
    const token = getToken();
    return !!token;
  }
};

// ==================== SERVICE DE PROFIL ====================

export const profileService = {
  getProfile: async (): Promise<IProfile> => {
    try {
      console.log("üìã R√©cup√©ration du profil...");
      const response = await apiClient.get("/profile/me");
      console.log("‚úÖ Profil r√©cup√©r√©:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration profil:", error.response?.data || error.message);
      
      // Donn√©es de d√©monstration en cas d'erreur
      const demoProfile: IProfile = {
        user_id: 1,
        bio: "Ceci est une bio de d√©monstration pour tester l'interface utilisateur.",
        profile_picture_url: null,
        disc_type: "D",
        disc_assessment_results: {
          D: 75,
          I: 60,
          S: 45,
          C: 30
        },
        interests: ["D√©veloppement", "Musique", "Voyages", "Photographie"],
        skills: ["JavaScript", "React", "TypeScript", "UI/UX"],
        objectives: "Am√©liorer mes comp√©tences en d√©veloppement frontend et backend.",
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log("üé≠ Utilisation du profil de d√©monstration");
      return demoProfile;
    }
  },

  updateProfile: async (profileData: Partial<IProfile>): Promise<IProfile> => {
    try {
      console.log("‚úèÔ∏è Mise √† jour du profil...");
      const response = await apiClient.put("/profile/me", profileData);
      console.log("‚úÖ Profil mis √† jour:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur mise √† jour profil:", error.response?.data || error.message);
      throw new Error("Impossible de mettre √† jour le profil");
    }
  }
};

// ==================== SERVICE DE PODS ====================

export const podService = {
  getPods: async (): Promise<IPod[]> => {
    try {
      console.log("üéµ R√©cup√©ration des pods...");
      const response = await apiClient.get("/pods");
      console.log("‚úÖ Pods r√©cup√©r√©s:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration pods:", error.response?.data || error.message);
      
      // Donn√©es de d√©monstration
      const demoPods: IPod[] = [
        {
          id: 1,
          title: "Transformation Jeunesse",
          description: "Un podcast inspirant sur le d√©veloppement personnel",
          audio_file_url: "/audio/transformation.mp3",
          transcription: "Transcription du podcast sur la transformation...",
          owner_id: 1,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          tags: ["d√©veloppement", "jeunesse"],
          duration: 1800,
          file_size: 25600000
        },
        {
          id: 2,
          title: "D√©veloppement Personnel",
          description: "Conseils pratiques pour votre croissance",
          audio_file_url: "/audio/developpement.mp3",
          transcription: "Transcription sur le d√©veloppement personnel...",
          owner_id: 1,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          tags: ["croissance", "conseils"],
          duration: 1200,
          file_size: 18400000
        }
      ];
      
      console.log("üé≠ Utilisation des pods de d√©monstration");
      return demoPods;
    }
  },

  createPod: async (podData: FormData): Promise<IPod> => {
    try {
      console.log("üé§ Cr√©ation d'un nouveau pod...");
      const response = await apiClient.post("/pods", podData, {
        headers: {
          "Content-Type": "multipart/form-data"
        },
        timeout: 180000 // 3 minutes pour l'upload
      });
      console.log("‚úÖ Pod cr√©√©:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur cr√©ation pod:", error.response?.data || error.message);
      throw new Error("Impossible de cr√©er le pod");
    }
  },

  getPodById: async (podId: number): Promise<IPod> => {
    try {
      console.log(`üéµ R√©cup√©ration du pod ${podId}...`);
      const response = await apiClient.get(`/pods/${podId}`);
      console.log("‚úÖ Pod r√©cup√©r√©:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration pod:", error.response?.data || error.message);
      throw new Error("Impossible de r√©cup√©rer le pod");
    }
  },

  updatePod: async (podId: number, podData: Partial<IPod>): Promise<IPod> => {
    try {
      console.log(`‚úèÔ∏è Mise √† jour du pod ${podId}...`);
      const response = await apiClient.put(`/pods/${podId}`, podData);
      console.log("‚úÖ Pod mis √† jour:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur mise √† jour pod:", error.response?.data || error.message);
      throw new Error("Impossible de mettre √† jour le pod");
    }
  },

  deletePod: async (podId: number): Promise<void> => {
    try {
      console.log(`üóëÔ∏è Suppression du pod ${podId}...`);
      await apiClient.delete(`/pods/${podId}`);
      console.log("‚úÖ Pod supprim√©");
    } catch (error: any) {
      console.error("‚ùå Erreur suppression pod:", error.response?.data || error.message);
      throw new Error("Impossible de supprimer le pod");
    }
  }
};

// ==================== SERVICE DE TRANSCRIPTION ====================

export const transcriptionService = {
  transcribeAudio: async (audioFile: File): Promise<ITranscription> => {
    try {
      console.log("üìù Transcription audio en cours...");
      
      const formData = new FormData();
      formData.append("audio_file", audioFile);
      formData.append("language", "fr");
      
      const response = await apiClient.post("/transcription/audio", formData, {
        headers: {
          "Content-Type": "multipart/form-data"
        },
        timeout: 300000 // 5 minutes pour la transcription
      });
      
      console.log("‚úÖ Transcription termin√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur transcription audio:", error.response?.data || error.message);
      
      // Transcription de d√©monstration
      const demoTranscription: ITranscription = {
        id: 1,
        content: "Ceci est une transcription de d√©monstration. Le contenu audio a √©t√© analys√© et converti en texte avec une pr√©cision √©lev√©e. Cette fonctionnalit√© permet de rendre accessible le contenu audio et de faciliter la recherche et l'indexation.",
        confidence: 0.95,
        language: "fr",
        duration: audioFile.size / 16000, // Estimation bas√©e sur la taille
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        segments: [
          {
            start: 0,
            end: 5,
            text: "Ceci est une transcription de d√©monstration.",
            confidence: 0.98
          },
          {
            start: 5,
            end: 15,
            text: "Le contenu audio a √©t√© analys√© et converti en texte avec une pr√©cision √©lev√©e.",
            confidence: 0.94
          }
        ]
      };
      
      console.log("üé≠ Utilisation de la transcription de d√©monstration");
      return demoTranscription;
    }
  },

  transcribeVideo: async (videoFile: File): Promise<ITranscription> => {
    try {
      console.log("üìπ Transcription vid√©o en cours...");
      
      const formData = new FormData();
      formData.append("video_file", videoFile);
      formData.append("language", "fr");
      formData.append("extract_audio", "true");
      
      const response = await apiClient.post("/transcription/video", formData, {
        headers: {
          "Content-Type": "multipart/form-data"
        },
        timeout: 600000 // 10 minutes pour la transcription vid√©o
      });
      
      console.log("‚úÖ Transcription vid√©o termin√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur transcription vid√©o:", error.response?.data || error.message);
      
      // Transcription de d√©monstration pour vid√©o
      const demoTranscription: ITranscription = {
        id: 2,
        content: "Transcription de d√©monstration pour contenu vid√©o. Cette fonctionnalit√© extrait l'audio de la vid√©o et le convertit en texte. Id√©al pour cr√©er des sous-titres automatiques ou analyser le contenu parl√© dans les vid√©os.",
        confidence: 0.92,
        language: "fr",
        duration: videoFile.size / 100000, // Estimation bas√©e sur la taille
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        segments: [
          {
            start: 0,
            end: 8,
            text: "Transcription de d√©monstration pour contenu vid√©o.",
            confidence: 0.96
          },
          {
            start: 8,
            end: 20,
            text: "Cette fonctionnalit√© extrait l'audio de la vid√©o et le convertit en texte.",
            confidence: 0.89
          }
        ]
      };
      
      console.log("üé≠ Utilisation de la transcription vid√©o de d√©monstration");
      return demoTranscription;
    }
  },

  getTranscription: async (transcriptionId: number): Promise<ITranscription> => {
    try {
      console.log(`üìÑ R√©cup√©ration de la transcription ${transcriptionId}...`);
      const response = await apiClient.get(`/transcription/${transcriptionId}`);
      console.log("‚úÖ Transcription r√©cup√©r√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration transcription:", error.response?.data || error.message);
      throw new Error("Impossible de r√©cup√©rer la transcription");
    }
  },

  updateTranscription: async (transcriptionId: number, content: string): Promise<ITranscription> => {
    try {
      console.log(`‚úèÔ∏è Mise √† jour de la transcription ${transcriptionId}...`);
      const response = await apiClient.put(`/transcription/${transcriptionId}`, { content });
      console.log("‚úÖ Transcription mise √† jour:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur mise √† jour transcription:", error.response?.data || error.message);
      throw new Error("Impossible de mettre √† jour la transcription");
    }
  },

  deleteTranscription: async (transcriptionId: number): Promise<void> => {
    try {
      console.log(`üóëÔ∏è Suppression de la transcription ${transcriptionId}...`);
      await apiClient.delete(`/transcription/${transcriptionId}`);
      console.log("‚úÖ Transcription supprim√©e");
    } catch (error: any) {
      console.error("‚ùå Erreur suppression transcription:", error.response?.data || error.message);
      throw new Error("Impossible de supprimer la transcription");
    }
  }
};

// ==================== SERVICE DE MATCHING ====================

export const matchService = {
  getMatches: async (): Promise<IAMatch[]> => {
    try {
      console.log("üéØ R√©cup√©ration des recommandations IA...");
      const response = await apiClient.get("/matches");
      console.log("‚úÖ Recommandations r√©cup√©r√©es:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration matches:", error.response?.data || error.message);
      
      // Donn√©es de d√©monstration
      const demoMatches: IAMatch[] = [
        {
          user: {
            id: 2,
            email: "marie.dupont@example.com",
            full_name: "Marie Dupont",
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          profile: {
            user_id: 2,
            bio: "Passionn√©e de d√©veloppement personnel et de coaching",
            profile_picture_url: null,
            disc_type: "I",
            disc_assessment_results: { D: 45, I: 85, S: 70, C: 40 },
            interests: ["Coaching", "D√©veloppement", "Communication"],
            skills: ["Leadership", "Communication", "Empathie"],
            objectives: "Aider les autres √† atteindre leur potentiel",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          match_score: 87,
          score_details: {
            disc_score: 75,
            interests_score: 90,
            content_score: 85,
            objectives_score: 95
          },
          match_reason: "Profils DISC compl√©mentaires et objectifs align√©s sur le d√©veloppement personnel"
        },
        {
          user: {
            id: 3,
            email: "thomas.martin@example.com",
            full_name: "Thomas Martin",
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          profile: {
            user_id: 3,
            bio: "Entrepreneur tech passionn√© d'innovation",
            profile_picture_url: null,
            disc_type: "D",
            disc_assessment_results: { D: 90, I: 60, S: 30, C: 70 },
            interests: ["Technologie", "Innovation", "Entrepreneuriat"],
            skills: ["JavaScript", "Leadership", "Innovation"],
            objectives: "Cr√©er des solutions technologiques impactantes",
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          },
          match_score: 78,
          score_details: {
            disc_score: 85,
            interests_score: 70,
            content_score: 80,
            objectives_score: 75
          },
          match_reason: "M√™me profil DISC dominant et comp√©tences techniques similaires"
        }
      ];
      
      console.log("üé≠ Utilisation des recommandations de d√©monstration");
      return demoMatches;
    }
  },

  getMatchDetails: async (userId: number): Promise<IAMatch> => {
    try {
      console.log(`üîç R√©cup√©ration des d√©tails du match ${userId}...`);
      const response = await apiClient.get(`/matches/${userId}`);
      console.log("‚úÖ D√©tails du match r√©cup√©r√©s:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration d√©tails match:", error.response?.data || error.message);
      throw new Error("Impossible de r√©cup√©rer les d√©tails du match");
    }
  }
};

// ==================== SERVICE VID√âO ====================

export const videoService = {
  uploadVideo: async (videoData: FormData): Promise<IVideo> => {
    try {
      console.log("üìπ Upload de vid√©o...");
      const response = await apiClient.post("/videos", videoData, {
        headers: {
          "Content-Type": "multipart/form-data"
        },
        timeout: 600000 // 10 minutes pour l'upload vid√©o
      });
      console.log("‚úÖ Vid√©o upload√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur upload vid√©o:", error.response?.data || error.message);
      throw new Error("Impossible d'uploader la vid√©o");
    }
  },

  getVideos: async (): Promise<IVideo[]> => {
    try {
      console.log("üìπ R√©cup√©ration des vid√©os...");
      const response = await apiClient.get("/videos");
      console.log("‚úÖ Vid√©os r√©cup√©r√©es:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration vid√©os:", error.response?.data || error.message);
      
      // Donn√©es de d√©monstration
      const demoVideos: IVideo[] = [
        {
          id: 1,
          title: "Pr√©sentation SpotBulle",
          description: "D√©couvrez les fonctionnalit√©s de SpotBulle",
          video_file_url: "/videos/presentation.mp4",
          thumbnail_url: "/images/thumbnail1.jpg",
          duration: 120,
          owner_id: 1,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          file_size: 52428800,
          format: "mp4"
        }
      ];
      
      console.log("üé≠ Utilisation des vid√©os de d√©monstration");
      return demoVideos;
    }
  },

  getVideoById: async (videoId: number): Promise<IVideo> => {
    try {
      console.log(`üìπ R√©cup√©ration de la vid√©o ${videoId}...`);
      const response = await apiClient.get(`/videos/${videoId}`);
      console.log("‚úÖ Vid√©o r√©cup√©r√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration vid√©o:", error.response?.data || error.message);
      throw new Error("Impossible de r√©cup√©rer la vid√©o");
    }
  },

  analyzeVideo: async (videoId: number): Promise<IAnalysis> => {
    try {
      console.log(`üîç Analyse de la vid√©o ${videoId}...`);
      const response = await apiClient.post(`/videos/${videoId}/analyze`);
      console.log("‚úÖ Analyse termin√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur analyse vid√©o:", error.response?.data || error.message);
      
      // Analyse de d√©monstration
      const demoAnalysis: IAnalysis = {
        id: 1,
        content_type: 'video',
        analysis_type: 'summary',
        results: {
          summary: "Vid√©o de pr√©sentation de SpotBulle montrant les fonctionnalit√©s principales",
          topics: ["pr√©sentation", "fonctionnalit√©s", "plateforme"],
          sentiment: "positif",
          key_moments: [
            { timestamp: 10, description: "Introduction de SpotBulle" },
            { timestamp: 45, description: "D√©monstration des fonctionnalit√©s" },
            { timestamp: 90, description: "Conclusion et appel √† l'action" }
          ]
        },
        confidence: 0.88,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log("üé≠ Utilisation de l'analyse vid√©o de d√©monstration");
      return demoAnalysis;
    }
  },

  deleteVideo: async (videoId: number): Promise<void> => {
    try {
      console.log(`üóëÔ∏è Suppression de la vid√©o ${videoId}...`);
      await apiClient.delete(`/videos/${videoId}`);
      console.log("‚úÖ Vid√©o supprim√©e");
    } catch (error: any) {
      console.error("‚ùå Erreur suppression vid√©o:", error.response?.data || error.message);
      throw new Error("Impossible de supprimer la vid√©o");
    }
  }
};

// ==================== SERVICE DISC ====================

export const discService = {
  submitAssessment: async (answers: Record<string, number>): Promise<DISCResults> => {
    try {
      console.log("üìä Soumission de l'√©valuation DISC...");
      const response = await apiClient.post("/disc/assessment", { answers });
      console.log("‚úÖ √âvaluation DISC termin√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur √©valuation DISC:", error.response?.data || error.message);
      
      // R√©sultats de d√©monstration
      const demoResults: DISCResults = {
        D: Math.floor(Math.random() * 40) + 60, // 60-100
        I: Math.floor(Math.random() * 40) + 40, // 40-80
        S: Math.floor(Math.random() * 40) + 30, // 30-70
        C: Math.floor(Math.random() * 40) + 20  // 20-60
      };
      
      console.log("üé≠ Utilisation des r√©sultats DISC de d√©monstration");
      return demoResults;
    }
  },

  getAssessmentQuestions: async (): Promise<any[]> => {
    try {
      console.log("‚ùì R√©cup√©ration des questions DISC...");
      const response = await apiClient.get("/disc/questions");
      console.log("‚úÖ Questions DISC r√©cup√©r√©es:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration questions DISC:", error.response?.data || error.message);
      
      // Questions de d√©monstration
      const demoQuestions = [
        {
          id: 1,
          question: "Je suis g√©n√©ralement...",
          options: [
            { value: "D", text: "Direct et d√©cisif" },
            { value: "I", text: "Enthousiaste et expressif" },
            { value: "S", text: "Patient et coop√©ratif" },
            { value: "C", text: "Pr√©cis et analytique" }
          ]
        },
        {
          id: 2,
          question: "Dans une √©quipe, je pr√©f√®re...",
          options: [
            { value: "D", text: "Prendre les d√©cisions rapidement" },
            { value: "I", text: "Motiver et inspirer les autres" },
            { value: "S", text: "Maintenir l'harmonie du groupe" },
            { value: "C", text: "Analyser les d√©tails avant d'agir" }
          ]
        }
      ];
      
      console.log("üé≠ Utilisation des questions DISC de d√©monstration");
      return demoQuestions;
    }
  },

  getResults: async (userId: number): Promise<DISCResults> => {
    try {
      console.log(`üìä R√©cup√©ration des r√©sultats DISC pour l'utilisateur ${userId}...`);
      const response = await apiClient.get(`/disc/results/${userId}`);
      console.log("‚úÖ R√©sultats DISC r√©cup√©r√©s:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur r√©cup√©ration r√©sultats DISC:", error.response?.data || error.message);
      throw new Error("Impossible de r√©cup√©rer les r√©sultats DISC");
    }
  }
};

// ==================== SERVICE IA ====================

export const aiService = {
  analyzeContent: async (content: string, contentType: 'text' | 'audio' | 'video' = 'text'): Promise<IAnalysis> => {
    try {
      console.log("ü§ñ Analyse IA du contenu...");
      const response = await apiClient.post("/ai/analyze", { 
        content, 
        content_type: contentType 
      });
      console.log("‚úÖ Analyse IA termin√©e:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur analyse IA:", error.response?.data || error.message);
      
      // R√©sultat de d√©monstration
      const demoAnalysis: IAnalysis = {
        id: Date.now(),
        content_type: contentType,
        analysis_type: 'summary',
        results: {
          sentiment: "positif",
          themes: ["d√©veloppement personnel", "motivation", "croissance"],
          summary: "Contenu inspirant ax√© sur le d√©veloppement personnel et la motivation.",
          keywords: ["d√©veloppement", "personnel", "motivation", "croissance", "objectifs"],
          recommendations: [
            "Continuer sur cette voie positive",
            "Ajouter des exemples concrets",
            "D√©velopper les aspects pratiques"
          ],
          confidence: 0.92
        },
        confidence: 0.92,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      
      console.log("üé≠ Utilisation de l'analyse IA de d√©monstration");
      return demoAnalysis;
    }
  },

  generateRecommendations: async (userId: number): Promise<any[]> => {
    try {
      console.log(`üéØ G√©n√©ration de recommandations pour l'utilisateur ${userId}...`);
      const response = await apiClient.post(`/ai/recommendations/${userId}`);
      console.log("‚úÖ Recommandations g√©n√©r√©es:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå Erreur g√©n√©ration recommandations:", error.response?.data || error.message);
      
      // Recommandations de d√©monstration
      const demoRecommendations = [
        {
          id: 1,
          type: "content",
          title: "Cr√©er un pod sur la gestion du temps",
          description: "Bas√© sur vos int√©r√™ts en d√©veloppement personnel",
          priority: "high",
          action_url: "/pods/create",
          estimated_impact: "√âlev√©"
        },
        {
          id: 2,
          type: "connection",
          title: "Connecter avec Marie Dupont",
          description: "Profil DISC compl√©mentaire et objectifs similaires",
          priority: "medium",
          action_url: "/matches/2",
          estimated_impact: "Moyen"
        },
        {
          id: 3,
          type: "skill",
          title: "Am√©liorer vos comp√©tences en communication",
          description: "Recommand√© pour votre profil DISC",
          priority: "medium",
          action_url: "/resources?category=communication",
          estimated_impact: "Moyen"
        }
      ];
      
      console.log("üé≠ Utilisation des recommandations de d√©monstration");
      return demoRecommendations;
    }
  },

  generateSummary: async (content: string): Promise<string> => {
    try {
      console.log("üìù G√©n√©ration de r√©sum√© IA...");
      const response = await apiClient.post("/ai/summary", { content });
      console.log("‚úÖ R√©sum√© g√©n√©r√©:", response.data);
      return response.data.summary;
    } catch (error: any) {
      console.error("‚ùå Erreur g√©n√©ration r√©sum√©:", error.response?.data || error.message);
      
      // R√©sum√© de d√©monstration
      const demoSummary = "R√©sum√© automatique g√©n√©r√© par IA : Ce contenu traite principalement de d√©veloppement personnel et de motivation. Les points cl√©s incluent l'importance de la croissance personnelle, la d√©finition d'objectifs clairs et l'adoption d'une mentalit√© positive pour atteindre ses aspirations.";
      
      console.log("üé≠ Utilisation du r√©sum√© de d√©monstration");
      return demoSummary;
    }
  }
};

// ==================== EXPORT PAR D√âFAUT ====================

export default {
  authService,
  profileService,
  podService,
  transcriptionService,
  matchService,
  videoService,
  discService,
  aiService
};

